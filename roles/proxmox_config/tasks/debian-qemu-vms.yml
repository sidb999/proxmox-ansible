- name: Add qemu vm
  when: create
  block:
    - name: Cluster NextID
      ansible.builtin.command: pvesh get /cluster/nextid
      changed_when: false
      register: nextid
    - name: Generate MAC Address for {{ nextid.stdout }}
      changed_when: macaddr_cmd.rc == 0
      failed_when: macaddr_cmd.rc > 0
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          #
          # Generate Random MAC-address
          #
          # Locally administered:
          #   X2-XX-XX-XX-XX-XX
          #   X6-XX-XX-XX-XX-XX
          #   XA-XX-XX-XX-XX-XX
          #   XE-XX-XX-XX-XX-XX
          #
          # Reference:
          #   https://en.wikipedia.org/wiki/MAC_address
          #
          # Original Source:
          #   https://gist.github.com/ggrandes/33a27eb00f49b94fcb0dfeb597226bab
          #
          randomMac () {
            local l=$(tr -dc '26ae' < /dev/urandom | dd bs=1 count=1 status=none)
            local r=$(tr -dc '0-9a-f' < /dev/urandom | dd bs=11 count=1 status=none)
            echo "${r:0:1}${l}:${r:1:2}:${r:3:2}:${r:5:2}:${r:7:2}:${r:9:2}"
          }
          randomMac
        executable: /bin/bash
      register: macaddr_cmd
    - name: Set node facts
      ansible.builtin.set_fact:
        next_vm_id: "{{ nextid.stdout }}"
        node_hostname: "{{ item }}-{{ nextid.stdout }}.srv"
        shebang: "#!/bin/bash"
        mac: "{{ macaddr_cmd.stdout }}"
    - name: Create {{ node_hostname }}
      register: create_node_cmd
      changed_when: create_node_cmd.rc == 0
      failed_when: create_node_cmd.rc > 0
      ansible.builtin.command: qm clone 100 {{ next_vm_id }} --name {{ node_hostname }}
    - name: Add hook script to {{ node_hostname }}
      ansible.builtin.template:
        src: "hook.j2"
        dest: "{{ snippet_storage_path }}/{{ node_hostname }}.sh"
        owner: ansible
        group: ansible
        mode: "0755"
    - name: Set hook-script {{ node_hostname }}
      register: qm_set_hook_script
      changed_when: qm_set_hook_script.rc == 0
      failed_when: qm_set_hook_script.rc > 0
      ansible.builtin.command: >-
        qm set {{ next_vm_id }} -hookscript {{ local_storage_name }}:snippets/{{ node_hostname }}.sh
    - name: Set macaddr {{ node_hostname }}
      register: qm_set_macaddr
      changed_when: qm_set_macaddr.rc == 0
      failed_when: qm_set_macaddr.rc > 0
      ansible.builtin.command: >-
        qm set {{ next_vm_id }} -net0 model=virtio,bridge=vmbr0,macaddr={{ mac }}
    - name: Create DHCP lease
      delegate_to: router
      ansible.builtin.import_role:
        name: router
    - name: Start {{ node_hostname }}
      register: start01
      changed_when: start01.rc == 0
      failed_when: start01.rc > 0
      ansible.builtin.command: qm start {{ next_vm_id }}
- name: Destroy qemu vm
  when: not create
  block:
    - name: Get node hostname
      changed_when: false
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          pvesh get nodes/pve/qemu/{{ item }}/config --output-format yaml | yq -r .name
        executable: /bin/bash
      register: node_hostname_cmd
    - name: Set fact node hostname
      ansible.builtin.set_fact:
        node_hostname: "{{ node_hostname_cmd.stdout }}"
        next_vm_id: "{{ item }}"
    - name: Stop {{ node_hostname }}
      register: stop_cmd
      changed_when: stop_cmd.rc == 0
      failed_when: stop_cmd.rc > 0
      ansible.builtin.command: qm stop {{ item }}
    - name: Delete DHCP lease
      delegate_to: router
      ansible.builtin.import_role:
        name: router
    - name: Destroy {{ node_hostname }}
      register: destroy_cmd
      changed_when: destroy_cmd.rc == 0
      failed_when: destroy_cmd.rc > 0
      ansible.builtin.command: qm destroy {{ item }} --destroy-unreferenced-disks --purge 1 --skiplock 1
