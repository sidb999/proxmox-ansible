---
- name: Assign default values
  ansible.builtin.set_fact:
    cloudimage_release: "{{ cloudimage_release | default(default_cloudimage_release) }}"
    cloudimage_repo_subdir: "{{ cloudimage_repo_subdir | default(default_cloudimage_repo_subdir) }}"
    cloudimage_hashtype: "{{ cloudimage_hashtype | default(default_cloudimage_hashtype) }}"
    cloudimage_type: "{{ cloudimage_type | default(default_cloudimage_type) }}"
    cloudimage_format: "{{ cloudimage_format | default(default_cloudimage_format) }}"
    cloudimage_repo_url: "{{ cloudimage_repo_url | default(default_cloudimage_repo_url) }}"
- name: Get the name and url of the cloudimage file
  ansible.builtin.import_tasks: cloudimage_url.yml

- name: Remove the extension from the image filename to get the vm name
  ansible.builtin.set_fact:
    cloudimage_template_name: "{{ cloudimage_filename.rsplit('.', 1)[0] }}"
- name: Get list of vms
  ansible.builtin.command: qm list
  changed_when: false
  register: qmlist

- name: Check if vm exists and get its vmid
  ansible.builtin.set_fact:
    cloudimage_template_existed: "{{ cloudimage_template_name in qmlist.stdout }}"
    cloudimage_template_created: false

- name: Store vmid of the existing vm
  ansible.builtin.set_fact:
    cloudimage_template_vmid: "{{ qmlist.stdout | regex_search('(\\d+) %s' % cloudimage_template_name, '\\1') | first }}"
  when: cloudimage_template_existed
- name: Get the next free vmid
  ansible.builtin.command: pvesh get /cluster/nextid
  changed_when: false
  register: nextid
  when: not cloudimage_template_existed
- name: Store vmid of the new vm
  ansible.builtin.set_fact:
    cloudimage_template_vmid: "{{ nextid.stdout }}"
  when: not cloudimage_template_existed

- name: Create the template vm
  ansible.builtin.command: >-
    qm create {{ cloudimage_template_vmid }}
    -name {{ cloudimage_template_name }}
    -template 1 -ostype l26 -agent 1
    -net0 virtio,bridge=vmbr0 -serial0 socket -vga serial0
    -ide2 {{ template_storage }}:cloudinit
    -rng0 source=/dev/random
    {{ "-pool %s" % template_pool if template_pool is defined }}
    --onboot 1
    --tablet 0
    --balloon 0
    --core 2
    --memory 16384
    --cpu cputype=host
  when: not cloudimage_template_existed
  changed_when: not cloudimage_template_existed
- name: Get the checksum of the cloudimage file
  when: not cloudimage_template_existed
  ansible.builtin.import_tasks: cloudimage_checksum.yml
- name: Create proxmox cloudimage template
  when: not cloudimage_template_existed
  block:
    - name: Download the image
      ansible.builtin.get_url:
        url: "{{ cloudimage_url }}"
        dest: "/tmp/{{ cloudimage_filename }}"
        checksum: "{{ cloudimage_hashtype }}:{{ cloudimage_checksum }}"
        mode: "0644"

    - name: Install libguestfs-tools
      ansible.builtin.apt:
        name: libguestfs-tools
        state: present
      when: cloudimage_qemuagent or 'bookworm' in cloudimage_repo_subdir

    - name: Add qemu-guest-agent
      ansible.builtin.command: virt-customize -a /tmp/{{ cloudimage_filename }} --install qemu-guest-agent
      changed_when: true
      when: cloudimage_qemuagent

    - name: Regenerate machine-id
      when: "'bookworm' in cloudimage_repo_subdir"
      block:
        - name: Remove /etc/machine-id
          ansible.builtin.command: virt-customize -a /tmp/{{ cloudimage_filename }} --delete /etc/machine-id
          changed_when: true

        - name: Copy cloudinit-config to temporary directory
          ansible.builtin.copy:
            src: cloudinit-bookworm-fix.cfg
            dest: /tmp/99-bookworm-fix.cfg
            owner: root
            group: root
            mode: "0644"

        - name: Add cloudimageconfig
          ansible.builtin.command:
            cmd: virt-customize -a /tmp/{{ cloudimage_filename }} --copy-in /tmp/99-bookworm-fix.cfg:/etc/cloud/cloud.cfg.d
          changed_when: true
    - name: Set import facts
      ansible.builtin.set_fact:
        cloudimage_import_args: --format {{ cloudimage_format }}
      when: cloudimage_format in ['raw', 'qcow2', 'vmdk']

    # - name: Set import facts
    #   ansible.builtin.set_fact:
    #     cloudimage_import_args: ""
    #   when: not cloudimage_format in ['raw', 'qcow2', 'vmdk']

    - name: Import the image to the template vm
      ansible.builtin.command: >-
        qm importdisk {{ cloudimage_template_vmid }}
        /tmp/{{ cloudimage_filename }}
        {{ vm_template_storage }}
      register: qmimportdisk
      failed_when: "'Successfully imported disk' not in qmimportdisk.stdout"
      changed_when: true

    - name: Attach the disk as virtio0
      ansible.builtin.command: >-
        qm set {{ cloudimage_template_vmid }}
        -scsihw virtio-scsi-pci
        -scsi0 {{ qmimportdisk.stdout |
        regex_search("imported disk as 'unused\d+:([^']+)'", "\1") | first }},{{ ",%s" % cloudimage_diskparams if cloudimage_diskparams is defined }}
        -boot c -bootdisk scsi0
      register: qmset
      changed_when: true

    - name: Store cloudimage_template_created=true
      ansible.builtin.set_fact:
        cloudimage_template_created: true

  rescue:
    - name: Something failed, remove the vm that is left without a disk
      ansible.builtin.command: >-
        qm destroy {{ cloudimage_template_vmid }} -destroy-unreferenced-disks 1
      changed_when: true

  # always:
  #   - name: Clean up the temporary file
  #     ansible.builtin.file:
  #       path: "/tmp/{{ cloudimage_filename }}"
  #       state: absent
  #     when: not cloudimage_keep
  #
  #   - name: Remove cloudinit fix
  #     ansible.builtin.file:
  #       path: /tmp/99-bookworm-fix.cfg
  #       state: absent
